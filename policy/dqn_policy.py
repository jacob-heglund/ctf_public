"""Random agents policy generator.

This module demonstrates an example of a simple heuristic policy generator
for Capture the Flag environment.
    http://github.com/osipychev/missionplanner/

DOs/Denis Osipychev
    http://www.denisos.com
"""

class PolicyGen:
    """Policy generator class for CtF env.
    
    This class can be used as a template for policy generator.
    Designed to summon an AI logic for the team of units.
    
    Methods:
        gen_action: Required method to generate a list of actions.
    """
    #TODO modify to take a hyperparameter dict
    def __init__(self, free_map, agent_list):
        ## define classes and functions to generate the actions     
        class myDQN(nn.Module):
            def __init__(self, num_states, num_actions):
                super(myDQN, self).__init__()
                # this CNN architecture will maintain the size of the input throughout the convolutions
                self.conv1 = nn.Conv2d(1, 1, 3, padding = 1) 
                self.conv2 = nn.Conv2d(1, 1, 3, padding = 1) 
                self.conv3 = nn.Conv2d(1, 1, 3, padding = 1)
                self.relu = nn.ReLU(inplace=True)

                self.fc = nn.Linear(num_states, num_actions)
            def forward(self, state):
            '''
            inputs{
                state (fully observable state) - np array of values representing the world
            } 
            outputs{
                out - Q values for the actions corresponding to the input state
            }
            '''
            state = torch.from_numpy(state)
            state = state.type(torch.cuda.FloatTensor)
            state = state.unsqueeze(0).unsqueeze(0)
            print(state.size())

            out = self.conv1(state)
            out = self.relu(out)
            print(out.size())
        
            out = self.conv2(out)
            out = self.relu(out)
            print(out.size())

            out = self.conv3(out)
            out = self.relu(out)
            print(out.size())

            out = out.view(out.size(0), -1)
            print(out.size())
            q_values = self.fc(out)
            print(q_values.size())
        
            return q_values

            """Constuctor for policy class.
            
            This class can be used as a template for policy generator.
            
            Args:
                free_map (np.array): 2d map of static environment.
                agent_list (list): list of all friendly units.
            """
        
        ## define stuff to be used in gen_action
        num_states = np.shape(obs_space)[0] * np.shape(obs_space)[1] 
        num_actions = env.action_space.n

        self.online_model = myDQN(num_states, num_actions)

    def gen_action(self, agent_list, observation, free_map=None):
        """Action generation method.
        
        This is a required method that passes a list of
        actions generated by the policy to the environment.
        """
        action_list = []
        
        for i in len(agent_list):
            #TODO print observationt omake sure it is the right thing
            state = observation
            
            if np.random.rand(1) < epsilon:
                q_values = self.online_model(state)
                action = env.action_space.sample()

            else:
                q_values = self.online_model(state)
                _, action = torch.max(q_values, 1)
                action = action.item()
        
            return action, q_values

            action = 
        return action_list